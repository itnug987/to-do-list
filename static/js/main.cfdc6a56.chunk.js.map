{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","onChange","e","setCompleted","value","text","setUpdate","target","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","console","log","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cfdc6a56.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n\r\n    const listItems = items.map(item =>{\r\n        return <div className=\"list\" key={item.key}>\r\n                    <p>\r\n                        <input type=\"checkbox\"\r\n                        id={item.key}\r\n                        onChange={\r\n                            (e) => {\r\n                                props.setCompleted(item.key)\r\n                            }\r\n                        }\r\n                        ></input>\r\n                        <input type=\"text\" \r\n                        id={item.key} \r\n                        value={item.text}\r\n                        onChange={\r\n                            (e) => {\r\n                                props.setUpdate(e.target.value, item.key)\r\n                            }\r\n                        }></input>\r\n                        <span>\r\n                            <button onClick={() => props.deleteItem(item.key)}>Delete</button>\r\n                        </span>\r\n                    </p>\r\n        </div>\r\n    })\r\n\r\n    return(\r\n         <div>\r\n             <FlipMove duration={500} easing=\"ease-in-out\">\r\n             {listItems}\r\n             </FlipMove>\r\n             </div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem: {\n        text:'',\n        key: ''\n      }\n    }\n\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.setCompleted = this.setCompleted.bind(this);\n\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  \n  addItem(e){\n    e.preventDefault();\n\n    const newItem = this.state.currentItem;\n    //console.log(newItem);\n\n    if(newItem.text!==\"\"){\n\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n          items: newItems,\n          currentItem: {\n            text: '',\n            key: ''\n          }\n      })\n\n      \n    }\n\n    console.log(this.state.items);\n\n  }\n\n  deleteItem(key){\n      const filteredItems = this.state.items.filter(item => item.key!==key);\n\n      this.setState({\n        items: filteredItems\n      })\n  }\n\n  setUpdate(text, key){\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key === key){\n          item.text = text;\n      }\n    })\n\n    this.setState({\n      items: items\n    })\n  }\n\n  setCompleted(key){\n    const items = this.state.items;\n\n    items.map(item =>{\n      if(item.key === key){\n          item.text = item.text+ \" -- completed\"\n      }\n    })\n\n    this.setState({\n      items: items\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>To DO List</h1>\n      \n      <div className=\"App\">\n          <header>\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\n                <input type=\"text\" placeholder=\"Enter text\"\n                value={this.state.currentItem.text}\n                onChange={this.handleInput}></input>\n                <button type=\"submit\">Add</button>\n            </form>\n      </header>\n\n      <ListItems items={this.state.items} deleteItem = {this.deleteItem} setUpdate = {this.setUpdate} setCompleted = {this.setCompleted}/>\n      </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}